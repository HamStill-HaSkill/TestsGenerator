using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace TestsGeneratorLib
{
    class TestGenerator
    {
        private string GetUsing(CompilationUnitSyntax root)
        {
            string testCode = "";
            var collector = new UsingCollector();
            collector.Visit(root);
            foreach (var us in collector.Usings)
            {               
                testCode += $"using {us.Name};\n";
            }
            testCode += "using NUnit.Framework;\n";
            return testCode;
        }

        private Dictionary<string, string> GenerateTests(CompilationUnitSyntax root)
        {
            Dictionary<string, string> codeFiles = new Dictionary<string, string>();
            string usingCode = GetUsing(root);

            var namespaceCollector = new NamespaceCollector();
            var classCollector = new ClassCollector();
            var methodCollector = new MethodCollector();

            string code = "";
            foreach (var item in root.Members)
            {
                namespaceCollector.Visit(item);
                foreach (var ns in namespaceCollector.Namespaces)
                {
                    classCollector.Visit(ns);
                    foreach (var cl in classCollector.Classes)
                    {
                        methodCollector.Visit(cl);
                        foreach (var method in methodCollector.Methods)
                        {
                            string parametors = "";
                            for (int i = 0; i < method.ParameterList.Parameters.Count; i++)
                            {
                                if (i < method.ParameterList.Parameters.Count - 1)
                                {
                                    parametors += $"{method.ParameterList.Parameters[i]},";
                                }
                                else
                                {
                                    parametors += $"{method.ParameterList.Parameters[i]}";
                                }
                            }
                            code += $"        [Test]\n        public {method.ReturnType} {method.Identifier}({parametors})\n        " + "{\n            Assert.Fail(\"autogenerated\");\n        }\n";
                        }
                        codeFiles.Add($"{ns.Name}-{cl.Identifier}", $"{usingCode}\nnamespace {ns.Name}\n" + "{\n" + $"    [TestFixture]\n    public class {cl.Identifier}\n" + "    {\n" + $"{code}" + "    }\n}\n");
                        code = "";
                        methodCollector.Methods.Clear();
                    }
                    classCollector.Classes.Clear();
                }
                namespaceCollector.Namespaces.Clear();
            }

            return codeFiles;
        }

        public Dictionary<string, string> CreateTest(string text)
        {
            SyntaxTree tree = CSharpSyntaxTree.ParseText(text);
            CompilationUnitSyntax root = tree.GetCompilationUnitRoot();
            return GenerateTests(root);
        }
    }
}
